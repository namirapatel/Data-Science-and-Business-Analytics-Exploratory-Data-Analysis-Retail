# -*- coding: utf-8 -*-
"""TSF_Task#3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uu1Px1rb8NJWvO-B1kxA5MM8gxO05AbI

**The Sparks Foundation at GRIPNOVEMBER21**

Data Science and Business Analytics
Exploratory Data Analysis-Retail

TASK 3

**Problem Statement**: Perform Exploratory Data Analysis on dataset "SampleSuperstore"

Dataset: https://bit.ly/3i4rbWl

Author: Namira Patel

**STEP_1: Importing libraries**
"""

# In this step we will import the required libarries 
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
import seaborn as sns

"""**STEP_2 : Read the dataset**"""

df = pd.read_csv('SampleSuperstore.csv')
df.head()

"""**STEP_3 : Data Preprocessing**"""

df.shape

df.columns

df.isnull().sum()

df.info()

df.describe()

#checkin for duplicate values

df.duplicated().sum()

#dropping the duplicates
df = df.drop_duplicates()
df.head()

#removing unnecessary columns such as postal code
df = df.drop(['Postal Code'],axis=1)

df.head()

"""**STEP_4 : Exploratory data Analysis**"""

#Visualizing the dataset as a Whole using the pair plot

sns.pairplot(df)

# finding the pairwise correlations between the columns and visualising using heatmaps
df.corr()
plt.figure(figsize=(10,5))
sns.heatmap(df.corr(), annot=True)
plt.show()

plt.figure(figsize = (6,6))
textprops = {"fontsize":15}
plt.title('Category')
plt.pie(df['Category'].value_counts(), labels=df['Category'].value_counts().index,autopct='%1.1f%%',textprops = textprops)
plt.show()

plt.figure(figsize= (10,16))
df.groupby('Category')['Profit','Sales'].agg(['sum']).plot.bar()
plt.ylabel('Profit')
plt.show()

# computing top categories in terms of sales from first 100 observations
top_category_s = df.groupby("Category").Sales.sum().nlargest(n=100)

# computing top categories in terms of profit from first 100 observations
top_category_p = df.groupby("Category").Profit.sum().nlargest(n=100)

# plotting to see it visually
plt.style.use('seaborn')
top_category_s.plot(kind = 'bar',figsize = (10,5),fontsize = 14)
top_category_p.plot(kind = 'bar',figsize = (10,5),fontsize = 14,color='red')
plt.xlabel('Category',fontsize = 15)
plt.ylabel('Total Sales/Profits',fontsize = 15)
plt.title("Top Category Sales vs Profit",fontsize = 15)
plt.show()

"""**Visualising the sub categories**

"""

# computing top sub-categories in terms of sales from first 100 observations
top_subcategory_s = df.groupby("Sub-Category").Sales.sum().nlargest(n = 100)
# computing top sub-categories in terms of profit from first 100 observations
top_subcategory_p = df.groupby("Sub-Category").Profit.sum().nlargest(n = 100)

# plotting to see it visually
plt.style.use('seaborn')
top_subcategory_s.plot(kind = 'bar',figsize = (10,5),fontsize = 14)
top_subcategory_p.plot(kind = 'bar',figsize = (10,5),fontsize = 14, color = 'red')
plt.xlabel('Sub-Category',fontsize = 15)
plt.ylabel('Total Sales/Profits',fontsize = 15)
plt.title("Top Sub-Category Sales vs Profit",fontsize = 15)
plt.show()

# A more detailed view
plt.figure(figsize=(14,12))
statewise = df.groupby(['Sub-Category'])['Profit'].sum().nlargest(50)
statewise.plot.barh() # h for horizontal

"""**Visualising the discount**"""

plt.figure(figsize=(8,7))
sns.lineplot(df['Discount'], df['Profit'], data=df)

"""**Visualising the sales vs profit in different Regions**



"""

plt.figure(figsize = (6,6))
plt.title('Region')
plt.pie(df['Region'].value_counts(), labels=df['Region'].value_counts().index,autopct='%1.1f%%')
plt.show()

# computing top states in terms of sales from first 10 observations
top_states_s = df.groupby("State").Sales.sum().nlargest(n=10)

# computing top states in terms of profit from first 10 observations
top_states_p = df.groupby("State").Profit.sum().nlargest(n = 10)

plt.style.use('seaborn')
top_states_s.plot(kind = 'bar',figsize = (10,5),fontsize = 14)
top_states_p.plot(kind = 'bar',figsize = (10,5),fontsize = 14, color = 'red')
plt.xlabel('States',fontsize = 15)
plt.ylabel('Total sales',fontsize = 15)
plt.title("Top 10 states Sales vs Profit",fontsize = 15)
plt.show()

plt.style.use('seaborn')
df.plot(kind = "scatter",figsize = (10,5), x = "Sales", y= "Profit", c = "Discount", s = 20,fontsize = 16,
        colormap = "viridis")
plt.ylabel('Total Profits',fontsize = 16)
plt.title("Interdependency of Sales,Profits and Discounts",fontsize = 16)

plt.show()

"""The graph clearly shows that if we give more Discount on our products sales increases but profit decreases.

**Conclusion :**

The weak areas where one can work to make more profit are :

1)We should limit sales of furniture and increase that of technology and office suppliers as furniture has very less profit as compared to sales.

2)Considering the sub-categories sales of tables should be minimized.

3)Increase sales more in the east as profit is more.

4)We should concentrate on the states like 'New York' and 'California' to make more profits
"""